# Importing header files
import numpy as np
import warnings

warnings.filterwarnings('ignore')

#New record
new_record=[[50,  9,  4,  1,  0,  0, 40,  0]]

#Reading file
data = np.genfromtxt(path, delimiter=",", skip_header=1)
data.shape

census=np.concatenate((data,new_record),axis=0)

# Simple analytics of the age distribution
age=census[:,0]
age

max_age=age.max()

min_age=age.min()

age_mean=age.mean()

age_std=age.std()

# Finding the minority_race
race_0=census[census[:,2]==0]
race_1=census[census[:,2]==1]
race_2=census[census[:,2]==2]
race_3=census[census[:,2]==3]
race_4=census[census[:,2]==4]

len_0=len(race_0)
len_1=len(race_1)
len_2=len(race_2)
len_3=len(race_3)
len_4=len(race_4)

len_list=[len_0,len_1,len_2,len_3,len_4]
minority_race=len_list.index(min(len_0,len_1,len_2,len_3,len_4))
minortity_race

# Finding senior citizens with age above 60 and 
# calculatiing their average working hours

senior_citizen=census[census[:,0]>60]
senior_citizen

working_hours_sum=senior_citizen.sum(axis=0)[6]
working_hours_sum

len(senior_citizen)

avg_working_hours=working_hours_sum/len(senior_citizen)
avg_working_hours

# Drawing a relatonship between education qualification and income
high=census[census[:,1]>10]
high

low=census[census[:,1]<=10]
low

avg_pay_high=sum(high[:,7])/len(high[:,7])
avg_pay_high


avg_pay_low=sum(low[:,7])/len(low[:,7])
avg_pay_low


